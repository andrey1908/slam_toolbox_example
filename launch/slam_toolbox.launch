<launch>

    <!-- Node to convert PointCloud2 to LaserScan -->
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan" output="screen">
        <remap from="cloud_in" to="/velodyne_points" />
        
        <param name="min_height" value="-0.4"/>
        <param name="max_height" value="0.1"/>
        <param name="range_max"  value="150"/>
        <param name="angle_increment" value="0.005"/>
    </node>

    <!-- Arguments -->
    
    <!-- pub_lidar_tf - if to publish static transform from left camera to lidar -->
    <arg name="pub_lidar_tf" default="false"/>
    <node if="$(arg pub_lidar_tf)" pkg="tf2_ros" type="static_transform_publisher" name="zed_left_camera_optical_frame_to_velodyne_transform"
        args="4.632155672047202216e-02 -1.327858803524132048e-01 -6.092748914769485769e-02 -2.109805266472031704e+00 -1.588226287078796428e+00 -2.618237322666464806e+00 zed_left_camera_optical_frame velodyne"/>
    
    <!-- openvslam_drift - OpenVSLAM odometry drift factor -->
    <arg name="openvslam_drift" default="0"/> <!-- 0.005 -->
    
    <!-- openvslam - if openvslam odometry is used -->
    <arg name="openvslam" default="true"/>
    <!-- Custom node to convert OpenVSLAM odometry from camera frame to base_link -->
    <node if="$(arg openvslam)" pkg="ros_utils" type="transform_odometry.py" name="transform_odometry" output="screen"
        args="--in-odom-topic /OpenVSLAM/odom \
              --from-frame zed_left_camera_optical_frame \
              --to-frame base_link \
              --odom-frame odom \
              --publish-odom-tf \
              --drift-factor $(arg openvslam_drift)"/>
    
    <!-- local - localization mode, otherwise mapping mode -->
    <arg name="local" default="false"/>

    <!-- SLAM Toolbox in mapping mode -->
    <node unless="$(arg local)" pkg="slam_toolbox" type="async_slam_toolbox_node" name="slam_toolbox" ns="slam_toolbox" output="screen">
        <rosparam command="load" file="$(find slam_toolbox_example)/config/mapping.yaml"/>
        <remap from="/map" to="map"/>
    </node>
    
    <!-- SLAM Toolbox in localization mode -->
    <node if="$(arg local)" pkg="slam_toolbox" type="localization_slam_toolbox_node" name="slam_toolbox" ns="slam_toolbox" output="screen">
        <rosparam command="load" file="$(find slam_toolbox_example)/config/localization.yaml"/>
        <remap from="/map" to="map"/>
    </node>

</launch>
